name: Weekly Ethereum Newsletter

on:
  schedule:
    # Every Monday 12:00 UTC
    - cron: '0 15 * * 5'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  generate-and-send:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate timestamp
        id: generate-timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d')" >> $GITHUB_ENV
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Build Prompt Context (last 7 days)
        run: python scripts/build_prompt_context.py

      - name: Print context contents
        run: cat scripts/prompt_context.md

      # --- GENERATE SECTIONS INDIVIDUALLY ---

      - name: Generate Part 1 - Core Protocol
        id: generate_part_1
        uses: xinbenlv/openhands-action@v1.0.1-rc3
        with:
          prompt: |
            Read 'prompts/part_1_core_protocol.md' and use it to generate the core protocol sections.
            Save the result to: ${{ github.workspace }}/part_1_output.md
          llm_api_key: ${{ secrets.LLM_API_KEY }}

      - name: Validate Part 1 Output
        run: |
          if [ ! -f "${{ github.workspace }}/part_1_output.md" ]; then
            echo "::error::Failed to generate Part 1 output file."
            exit 1
          fi
          echo "✅ Part 1 output file created successfully."

      - name: Generate Part 2 - Ecosystem & App Layer
        id: generate_part_2
        uses: xinbenlv/openhands-action@v1.0.1-rc3
        with:
          prompt: |
            Read 'prompts/part_2_ecosystem.md' and use it to generate the ecosystem sections.
            Save the result to: ${{ github.workspace }}/part_2_output.md
          llm_api_key: ${{ secrets.LLM_API_KEY }}

      - name: Validate Part 2 Output
        run: |
          if [ ! -f "${{ github.workspace }}/part_2_output.md" ]; then
            echo "::error::Failed to generate Part 2 output file."
            exit 1
          fi
          echo "✅ Part 2 output file created successfully."

      - name: Generate Part 3 - Data-Driven & General Info
        id: generate_part_3
        uses: xinbenlv/openhands-action@v1.0.1-rc3
        with:
          prompt: |
            Read 'prompts/part_3_data_general.md'. Your context data is in 'scripts/prompt_context.md'.
            Use it to generate the data-driven sections. Save the result to: ${{ github.workspace }}/part_3_output.md
          context: scripts/prompt_context.md
          llm_api_key: ${{ secrets.LLM_API_KEY }}
          
      - name: Validate Part 3 Output
        run: |
          if [ ! -f "${{ github.workspace }}/part_3_output.md" ]; then
            echo "::error::Failed to generate Part 3 output file."
            exit 1
          fi
          echo "✅ Part 3 output file created successfully."

      # --- COMBINE AND SEND ---

      - name: Combine Newsletter Sections
        id: combine_step
        run: |
          sudo bash -c '
            FINAL_FILE="${{ github.workspace }}/final_newsletter.md"
            TIMESTAMP=$(date -u +"%B %d, %Y")

            echo "Creating final newsletter file at $FINAL_FILE"
            # Create the final newsletter file with a header
            echo "## Week in Ethereum News" > "$FINAL_FILE"
            echo "### $TIMESTAMP" >> "$FINAL_FILE"
            echo "" >> "$FINAL_FILE"
            
            # --- Verbose Combination Logic ---
            echo "Checking for partial files..."
            PART_1_FILE="${{ github.workspace }}/part_1_output.md"
            PART_2_FILE="${{ github.workspace }}/part_2_output.md"
            PART_3_FILE="${{ github.workspace }}/part_3_output.md"
            
            if [ -f "$PART_1_FILE" ]; then
              echo "✅ Found Part 1. Appending to final newsletter."
              cat "$PART_1_FILE" >> "$FINAL_FILE"
              echo -e "\n" >> "$FINAL_FILE"
            else
              echo "❌ WARNING: Part 1 file not found at $PART_1_FILE"
            fi
            
            if [ -f "$PART_2_FILE" ]; then
              echo "✅ Found Part 2. Appending to final newsletter."
              cat "$PART_2_FILE" >> "$FINAL_FILE"
              echo -e "\n" >> "$FINAL_FILE"
            else
              echo "❌ WARNING: Part 2 file not found at $PART_2_FILE"
            fi
            
            if [ -f "$PART_3_FILE" ]; then
              echo "✅ Found Part 3. Appending to final newsletter."
              cat "$PART_3_FILE" >> "$FINAL_FILE"
              echo -e "\n" >> "$FINAL_FILE"
            else
              echo "❌ WARNING: Part 3 file not found at $PART_3_FILE"
            fi
            
            echo "--- Final Combined Newsletter ---"
            cat "$FINAL_FILE"
            echo "---------------------------------"

            # Final check to ensure the file is not just a header
            # Count lines, if less than 5 (header + timestamp + blank line + maybe one content line), fail.
            if [ $(wc -l < "$FINAL_FILE") -lt 5 ]; then
              echo "::error::Final newsletter file is nearly empty. Halting workflow to prevent sending a blank email."
              exit 1
            fi
          '

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies round 2
        run: pip install resend markdown2
        

      - name: Send Newsletter via Resend
        run: |
          # Your send script now uses the combined file with an absolute path
          # It can read the file even if it's owned by root.
          python scripts/send_newsletter.py "${{ github.workspace }}/final_newsletter.md"
        env:
          NEWSLETTER_RECIPIENT: 226angelli@gmail.com
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
