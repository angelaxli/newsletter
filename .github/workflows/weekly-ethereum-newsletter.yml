name: Weekly Ethereum Newsletter

on:
  schedule:
    # Every Monday 12:00 UTC
    - cron: '0 15 * * 5'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  generate-and-send:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate timestamp
        id: generate-timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Install Python and requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Prompt Context (last 7 days)
        run: python scripts/build_prompt_context.py

      - name: Print context
        run: cat scripts/prompt_context.md

      - name: Generate Part 1
        id: generate_part_1 # Add an ID to reference the output
        uses: xinbenlv/openhands-action@v1.0.1-rc3
        with:
          prompt: |
            Read 'prompts/prompt_1.md'. Your task is to generate the Core Protocol sections.
            Your final output should be ONLY the complete Markdown content for this section.
          llm_api_key: ${{ secrets.LLM_API_KEY }}

      - name: Save Part 1 Output
        if: steps.generate_part_1.outputs.result
        run: echo "${{ steps.generate_part_1.outputs.result }}" > ${{ github.workspace }}/part_1_output.md

      - name: Generate Part 2
        id: generate_part_2 # Add an ID
        uses: xinbenlv/openhands-action@v1.0.1-rc3
        with:
          prompt: |
            Read 'prompts/prompt_2.md'. Your task is to generate the Ecosystem sections.
            Your final output should be ONLY the complete Markdown content for this section.
          llm_api_key: ${{ secrets.LLM_API_KEY }}

      - name: Save Part 2 Output
        if: steps.generate_part_2.outputs.result
        run: echo "${{ steps.generate_part_2.outputs.result }}" > ${{ github.workspace }}/part_2_output.md

      - name: Generate Part 3
        id: generate_part_3 # Add an ID
        uses: xinbenlv/openhands-action@v1.0.1-rc3
        with:
          prompt: |
            Read 'prompts/prompt_3.md'. Your ONLY context data is in 'scripts/prompt_context.md'.
            Your final output should be ONLY the complete Markdown content for this section.
          context: scripts/prompt_context.md
          llm_api_key: ${{ secrets.LLM_API_KEY }}
          
      - name: Save Part 3 Output
        if: steps.generate_part_3.outputs.result
        run: echo "${{ steps.generate_part_3.outputs.result }}" > ${{ github.workspace }}/part_3_output.md

      # --- COMBINE AND SEND ---

      - name: Combine Newsletter Sections
        run: |
          # Use sudo to ensure we have permission to create the final file
          sudo bash -c '
            chown -R $(id -u):$(id -g) ${{ github.workspace }}
            FINAL_FILE="${{ github.workspace }}/final_newsletter.md"
            TIMESTAMP=$(date -u +"%B %d, %Y")

            echo "## Week in Ethereum News" > "$FINAL_FILE"
            echo "### $TIMESTAMP" >> "$FINAL_FILE"
            echo "" >> "$FINAL_FILE"
            
            # Find and combine all part_*_output.md files
            find "${{ github.workspace }}" -name "part_*_output.md" -print0 | sort -z | xargs -0 cat >> "$FINAL_FILE"
            
            echo "--- Final Combined Newsletter ---"
            cat "$FINAL_FILE"
            echo "---------------------------------"
          '

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install resend and markdown2
        run: pip install resend markdown2

      - name: Send Newsletter via Resend
        run: |
          # The send script can now reliably read the final file
          python scripts/send_newsletter.py "${{ github.workspace }}/final_newsletter.md"
        env:
          NEWSLETTER_RECIPIENT: ${{ secrets.NEWSLETTER_RECIPIENT }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
